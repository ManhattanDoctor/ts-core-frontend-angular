@use 'sass:map';
@use '@angular/material' as mat;
@use '../variables' as var;

@import 'bootstrap/scss/functions';
@import 'bootstrap/scss/variables';
@import 'bootstrap/scss/mixins/breakpoints';

@mixin core() {
    $border-radius: var.$border-radius;
    // Rounded
    .rounded {
        border-radius: $border-radius !important;
    }
    .rounded-top {
        border-top-left-radius: $border-radius !important;
        border-top-right-radius: $border-radius !important;
    }
    .rounded-right {
        border-top-right-radius: $border-radius !important;
        border-bottom-right-radius: $border-radius !important;
    }
    .rounded-bottom {
        border-bottom-right-radius: $border-radius !important;
        border-bottom-left-radius: $border-radius !important;
    }
    .rounded-left {
        border-top-left-radius: $border-radius !important;
        border-bottom-left-radius: $border-radius !important;
    }
    .rounded-circle {
        border-radius: 50% !important;
    }
}

@mixin color($theme) {
    $warn: map.get($theme, 'warn');
    $accent: map.get($theme, 'accent');
    $primary: map.get($theme, 'primary');
    $is-dark: map.get($theme, 'is-dark');
    $foreground: map.get($theme, 'foreground');

    $base-color: map.get($foreground, 'base');
    $base-color-invert: map.get($foreground, 'base-invert');

    $border-color: map.get($foreground, 'divider');

    $warn-color: mat.get-color-from-palette($warn);
    $accent-color: mat.get-color-from-palette($accent);
    $primary-color: mat.get-color-from-palette($primary);

    $border-width: 1px;

    @each $breakpoint in map-keys($grid-breakpoints) {
        @include media-breakpoint-up($breakpoint) {
            $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
            @include border-mixin($infix, $border-width, $border-color);
        }
    }

    // Main colors
    .border-warn {
        border-color: $warn-color !important;
    }
    .border-warn-hover {
        &:hover {
            border-color: $warn-color !important;
        }
    }
    .border-accent {
        border-color: $accent-color !important;
    }
    .border-accent-hover {
        &:hover {
            border-color: $accent-color !important;
        }
    }
    .border-primary {
        border-color: $primary-color !important;
    }
    .border-primary-hover {
        &:hover {
            border-color: $primary-color !important;
        }
    }
    .border-base {
        border-color: $base-color !important;
    }
    .border-base-hover {
        &:hover {
            border-color: $base-color !important;
        }
    }
    .border-base-invert {
        border-color: $base-color-invert !important;
    }
    .border-base-invert-hover {
        &:hover {
            border-color: $base-color-invert !important;
        }
    }
}

@mixin border-mixin($infix, $width, $color) {
    // Transparent
    .border-transparent {
        border-width: $width;
        border-color: transparent !important;
        border-style: solid !important;
    }
    // Top
    .border#{$infix}-top {
        border-top-width: $width;
        border-top-color: $color !important;
        border-top-style: solid !important;
    }
    .border#{$infix}-top-0 {
        border-top-style: none !important;
    }
    // Right
    .border#{$infix}-right {
        border-right-width: $width;
        border-right-color: $color !important;
        border-right-style: solid !important;
    }
    .border#{$infix}-right-0 {
        border-right-style: none !important;
    }
    // Bottom
    .border#{$infix}-bottom {
        border-bottom-width: $width;
        border-bottom-color: $color !important;
        border-bottom-style: solid !important;
    }
    .border#{$infix}-bottom-0 {
        border-bottom-style: none !important;
    }
    // Left
    .border#{$infix}-left {
        border-left-width: $width;
        border-left-color: $color !important;
        border-left-style: solid !important;
    }
    .border#{$infix}-left-0 {
        border-left-style: none !important;
    }

    // X
    .border#{$infix}-x {
        border-left-width: $width;
        border-left-color: $color !important;
        border-left-style: solid !important;

        border-right-width: $width;
        border-right-color: $color !important;
        border-right-style: solid !important;
    }
    .border#{$infix}-x-0 {
        border-left-style: none !important;
        border-right-style: none !important;
    }

    // Default
    .border#{$infix} {
        border-width: $width;
        border-color: $color !important;
        border-style: solid !important;
        &.dashed {
            border-style: dashed !important;
        }
    }
    .border#{$infix}-0 {
        border-style: none !important;
    }

    // Y
    .border#{$infix}-y {
        border-top-width: $width;
        border-top-color: $color !important;
        border-top-style: solid !important;

        border-bottom-width: $width;
        border-bottom-color: $color;
        border-bottom-style: solid !important;
    }
    .border#{$infix}-x-0 {
        border-top-style: none !important;
        border-bottom-style: none !important;
    }
}

@mixin typography($typography) {
}
@mixin theme($theme, $typography) {
    $color: mat.get-color-config($theme);
    @if $color != null {
        @include color($theme);
    }
    @if $typography != null {
        @include typography($typography);
    }
}
